{"mappings":"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","sources":["<anon>","predict.js","node_modules/@huggingface/inference/dist/index.mjs","node_modules/@parcel/node-resolver-core/lib/_empty.js"],"sourcesContent":["/// <reference path=\"./index.d.ts\" />\nvar $83f84355242de2ef$var$__defProp = Object.defineProperty;\nvar $83f84355242de2ef$var$__export = (target, all)=>{\n    for(var name in all)$83f84355242de2ef$var$__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/tasks/index.ts\nvar $83f84355242de2ef$var$tasks_exports = {};\n$83f84355242de2ef$var$__export($83f84355242de2ef$var$tasks_exports, {\n    audioClassification: ()=>$83f84355242de2ef$export$191dedb79ecb6be2,\n    audioToAudio: ()=>$83f84355242de2ef$export$230679174d66278c,\n    automaticSpeechRecognition: ()=>$83f84355242de2ef$export$45540d16a08deefc,\n    conversational: ()=>$83f84355242de2ef$export$fb2671fdb4412f4,\n    documentQuestionAnswering: ()=>$83f84355242de2ef$export$44e879def27251a6,\n    featureExtraction: ()=>$83f84355242de2ef$export$4da39d3aa25bf588,\n    fillMask: ()=>$83f84355242de2ef$export$f3dee6b3293edc29,\n    imageClassification: ()=>$83f84355242de2ef$export$5e39dd2454de72c1,\n    imageSegmentation: ()=>$83f84355242de2ef$export$5d94955430963212,\n    imageToImage: ()=>$83f84355242de2ef$export$1f65a9f0c1989d75,\n    imageToText: ()=>$83f84355242de2ef$export$453147eda7d56624,\n    objectDetection: ()=>$83f84355242de2ef$export$76ab3938a177f534,\n    questionAnswering: ()=>$83f84355242de2ef$export$de2ef96765c63d8f,\n    request: ()=>$83f84355242de2ef$export$b5fe3f66a567bec0,\n    sentenceSimilarity: ()=>$83f84355242de2ef$export$f5bdb9275cdaf228,\n    streamingRequest: ()=>$83f84355242de2ef$export$8607f8b0bdf7b41e,\n    summarization: ()=>$83f84355242de2ef$export$9eefd9261892b2a5,\n    tableQuestionAnswering: ()=>$83f84355242de2ef$export$8d37b662f2b5d26,\n    tabularClassification: ()=>$83f84355242de2ef$export$81fb7c2b09f13493,\n    tabularRegression: ()=>$83f84355242de2ef$export$15d00edf67cac9c3,\n    textClassification: ()=>$83f84355242de2ef$export$274031b1177580ed,\n    textGeneration: ()=>$83f84355242de2ef$export$c8d25d5e9850cad5,\n    textGenerationStream: ()=>$83f84355242de2ef$export$9a70408d68cc560c,\n    textToImage: ()=>$83f84355242de2ef$export$b5b9acc46fc11686,\n    textToSpeech: ()=>$83f84355242de2ef$export$571577318a532f76,\n    tokenClassification: ()=>$83f84355242de2ef$export$c754171538aa992c,\n    translation: ()=>$83f84355242de2ef$export$a984e488de492859,\n    visualQuestionAnswering: ()=>$83f84355242de2ef$export$f71526656a63f07b,\n    zeroShotClassification: ()=>$83f84355242de2ef$export$703bc6fbfac4432d,\n    zeroShotImageClassification: ()=>$83f84355242de2ef$export$9dc792cb511566f3\n});\n// src/lib/isUrl.ts\nfunction $83f84355242de2ef$var$isUrl(modelOrUrl) {\n    return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\n}\n// src/lib/getDefaultTask.ts\nvar $83f84355242de2ef$var$taskCache = /* @__PURE__ */ new Map();\nvar $83f84355242de2ef$var$CACHE_DURATION = 600000;\nvar $83f84355242de2ef$var$MAX_CACHE_ITEMS = 1e3;\nvar $83f84355242de2ef$var$HF_HUB_URL = \"https://huggingface.co\";\nasync function $83f84355242de2ef$var$getDefaultTask(model, accessToken, options) {\n    if ($83f84355242de2ef$var$isUrl(model)) return null;\n    const key = `${model}:${accessToken}`;\n    let cachedTask = $83f84355242de2ef$var$taskCache.get(key);\n    if (cachedTask && cachedTask.date < new Date(Date.now() - $83f84355242de2ef$var$CACHE_DURATION)) {\n        $83f84355242de2ef$var$taskCache.delete(key);\n        cachedTask = void 0;\n    }\n    if (cachedTask === void 0) {\n        const modelTask = await (options?.fetch ?? fetch)(`${$83f84355242de2ef$var$HF_HUB_URL}/api/models/${model}?expand[]=pipeline_tag`, {\n            headers: accessToken ? {\n                Authorization: `Bearer ${accessToken}`\n            } : {}\n        }).then((resp)=>resp.json()).then((json)=>json.pipeline_tag).catch(()=>null);\n        if (!modelTask) return null;\n        cachedTask = {\n            task: modelTask,\n            date: /* @__PURE__ */ new Date()\n        };\n        $83f84355242de2ef$var$taskCache.set(key, {\n            task: modelTask,\n            date: /* @__PURE__ */ new Date()\n        });\n        if ($83f84355242de2ef$var$taskCache.size > $83f84355242de2ef$var$MAX_CACHE_ITEMS) $83f84355242de2ef$var$taskCache.delete($83f84355242de2ef$var$taskCache.keys().next().value);\n    }\n    return cachedTask.task;\n}\n// src/lib/makeRequestOptions.ts\nvar $83f84355242de2ef$var$HF_INFERENCE_API_BASE_URL = \"https://api-inference.huggingface.co\";\nvar $83f84355242de2ef$var$tasks = null;\nasync function $83f84355242de2ef$var$makeRequestOptions(args, options) {\n    const { accessToken: accessToken, model: _model, ...otherArgs } = args;\n    let { model: model } = args;\n    const { forceTask: task, includeCredentials: includeCredentials, taskHint: taskHint, ...otherOptions } = options ?? {};\n    const headers = {};\n    if (accessToken) headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    if (!model && !$83f84355242de2ef$var$tasks && taskHint) {\n        const res = await fetch(`${$83f84355242de2ef$var$HF_HUB_URL}/api/tasks`);\n        if (res.ok) $83f84355242de2ef$var$tasks = await res.json();\n    }\n    if (!model && $83f84355242de2ef$var$tasks && taskHint) {\n        const taskInfo = $83f84355242de2ef$var$tasks[taskHint];\n        if (taskInfo) model = taskInfo.models[0].id;\n    }\n    if (!model) throw new Error(\"No model provided, and no default model found for this task\");\n    const binary = \"data\" in args && !!args.data;\n    if (!binary) headers[\"Content-Type\"] = \"application/json\";\n    else {\n        if (options?.wait_for_model) headers[\"X-Wait-For-Model\"] = \"true\";\n        if (options?.use_cache === false) headers[\"X-Use-Cache\"] = \"false\";\n        if (options?.dont_load_model) headers[\"X-Load-Model\"] = \"0\";\n    }\n    const url = (()=>{\n        if ($83f84355242de2ef$var$isUrl(model)) return model;\n        if (task) return `${$83f84355242de2ef$var$HF_INFERENCE_API_BASE_URL}/pipeline/${task}/${model}`;\n        return `${$83f84355242de2ef$var$HF_INFERENCE_API_BASE_URL}/models/${model}`;\n    })();\n    let credentials;\n    if (typeof includeCredentials === \"string\") credentials = includeCredentials;\n    else if (typeof includeCredentials === \"boolean\") credentials = includeCredentials ? \"include\" : void 0;\n    else if (includeCredentials === void 0) credentials = \"same-origin\";\n    const info = {\n        headers: headers,\n        method: \"POST\",\n        body: binary ? args.data : JSON.stringify({\n            ...otherArgs,\n            options: options && otherOptions\n        }),\n        credentials: credentials,\n        signal: options?.signal\n    };\n    return {\n        url: url,\n        info: info\n    };\n}\n// src/tasks/custom/request.ts\nasync function $83f84355242de2ef$export$b5fe3f66a567bec0(args, options) {\n    const { url: url, info: info } = await $83f84355242de2ef$var$makeRequestOptions(args, options);\n    const response = await (options?.fetch ?? fetch)(url, info);\n    if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) return $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        wait_for_model: true\n    });\n    if (!response.ok) {\n        if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n            const output = await response.json();\n            if (output.error) throw new Error(output.error);\n        }\n        throw new Error(\"An error occurred while fetching the blob\");\n    }\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) return await response.json();\n    return await response.blob();\n}\n// src/vendor/fetch-event-source/parse.ts\nfunction $83f84355242de2ef$var$getLines(onLine) {\n    let buffer;\n    let position;\n    let fieldLength;\n    let discardTrailingNewline = false;\n    return function onChunk(arr) {\n        if (buffer === void 0) {\n            buffer = arr;\n            position = 0;\n            fieldLength = -1;\n        } else buffer = $83f84355242de2ef$var$concat(buffer, arr);\n        const bufLength = buffer.length;\n        let lineStart = 0;\n        while(position < bufLength){\n            if (discardTrailingNewline) {\n                if (buffer[position] === 10 /* NewLine */ ) lineStart = ++position;\n                discardTrailingNewline = false;\n            }\n            let lineEnd = -1;\n            for(; position < bufLength && lineEnd === -1; ++position)switch(buffer[position]){\n                case 58 /* Colon */ :\n                    if (fieldLength === -1) fieldLength = position - lineStart;\n                    break;\n                case 13 /* CarriageReturn */ :\n                    discardTrailingNewline = true;\n                case 10 /* NewLine */ :\n                    lineEnd = position;\n                    break;\n            }\n            if (lineEnd === -1) break;\n            onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n            lineStart = position;\n            fieldLength = -1;\n        }\n        if (lineStart === bufLength) buffer = void 0;\n        else if (lineStart !== 0) {\n            buffer = buffer.subarray(lineStart);\n            position -= lineStart;\n        }\n    };\n}\nfunction $83f84355242de2ef$var$getMessages(onId, onRetry, onMessage) {\n    let message = $83f84355242de2ef$var$newMessage();\n    const decoder = new TextDecoder();\n    return function onLine(line, fieldLength) {\n        if (line.length === 0) {\n            onMessage?.(message);\n            message = $83f84355242de2ef$var$newMessage();\n        } else if (fieldLength > 0) {\n            const field = decoder.decode(line.subarray(0, fieldLength));\n            const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */  ? 2 : 1);\n            const value = decoder.decode(line.subarray(valueOffset));\n            switch(field){\n                case \"data\":\n                    message.data = message.data ? message.data + \"\\n\" + value : value;\n                    break;\n                case \"event\":\n                    message.event = value;\n                    break;\n                case \"id\":\n                    onId(message.id = value);\n                    break;\n                case \"retry\":\n                    const retry = parseInt(value, 10);\n                    if (!isNaN(retry)) onRetry(message.retry = retry);\n                    break;\n            }\n        }\n    };\n}\nfunction $83f84355242de2ef$var$concat(a, b) {\n    const res = new Uint8Array(a.length + b.length);\n    res.set(a);\n    res.set(b, a.length);\n    return res;\n}\nfunction $83f84355242de2ef$var$newMessage() {\n    return {\n        data: \"\",\n        event: \"\",\n        id: \"\",\n        retry: void 0\n    };\n}\n// src/tasks/custom/streamingRequest.ts\nasync function* $83f84355242de2ef$export$8607f8b0bdf7b41e(args, options) {\n    const { url: url, info: info } = await $83f84355242de2ef$var$makeRequestOptions({\n        ...args,\n        stream: true\n    }, options);\n    const response = await (options?.fetch ?? fetch)(url, info);\n    if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) return $83f84355242de2ef$export$8607f8b0bdf7b41e(args, {\n        ...options,\n        wait_for_model: true\n    });\n    if (!response.ok) {\n        if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n            const output = await response.json();\n            if (output.error) throw new Error(output.error);\n        }\n        throw new Error(`Server response contains error: ${response.status}`);\n    }\n    if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) throw new Error(`Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\"));\n    if (!response.body) return;\n    const reader = response.body.getReader();\n    let events = [];\n    const onEvent = (event)=>{\n        events.push(event);\n    };\n    const onChunk = $83f84355242de2ef$var$getLines($83f84355242de2ef$var$getMessages(()=>{}, ()=>{}, onEvent));\n    try {\n        while(true){\n            const { done: done, value: value } = await reader.read();\n            if (done) return;\n            onChunk(value);\n            for (const event of events)if (event.data.length > 0) {\n                const data = JSON.parse(event.data);\n                if (typeof data === \"object\" && data !== null && \"error\" in data) throw new Error(data.error);\n                yield data;\n            }\n            events = [];\n        }\n    } finally{\n        reader.releaseLock();\n    }\n}\n// src/lib/InferenceOutputError.ts\nvar $83f84355242de2ef$export$f8adce7c2e271071 = class extends TypeError {\n    constructor(message){\n        super(`Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`);\n        this.name = \"InferenceOutputError\";\n    }\n};\n// src/tasks/audio/audioClassification.ts\nasync function $83f84355242de2ef$export$191dedb79ecb6be2(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"audio-classification\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x.label === \"string\" && typeof x.score === \"number\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{label: string, score: number}>\");\n    return res;\n}\n// src/tasks/audio/automaticSpeechRecognition.ts\nasync function $83f84355242de2ef$export$45540d16a08deefc(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"automatic-speech-recognition\"\n    });\n    const isValidOutput = typeof res?.text === \"string\";\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected {text: string}\");\n    return res;\n}\n// src/tasks/audio/textToSpeech.ts\nasync function $83f84355242de2ef$export$571577318a532f76(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"text-to-speech\"\n    });\n    const isValidOutput = res && res instanceof Blob;\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Blob\");\n    return res;\n}\n// src/tasks/audio/audioToAudio.ts\nasync function $83f84355242de2ef$export$230679174d66278c(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"audio-to-audio\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x.label === \"string\" && typeof x.blob === \"string\" && typeof x[\"content-type\"] === \"string\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{label: string, blob: string, content-type: string}>\");\n    return res;\n}\n// src/tasks/cv/imageClassification.ts\nasync function $83f84355242de2ef$export$5e39dd2454de72c1(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"image-classification\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x.label === \"string\" && typeof x.score === \"number\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{label: string, score: number}>\");\n    return res;\n}\n// src/tasks/cv/imageSegmentation.ts\nasync function $83f84355242de2ef$export$5d94955430963212(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"image-segmentation\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{label: string, mask: string, score: number}>\");\n    return res;\n}\n// src/tasks/cv/imageToText.ts\nasync function $83f84355242de2ef$export$453147eda7d56624(args, options) {\n    const res = (await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"image-to-text\"\n    }))?.[0];\n    if (typeof res?.generated_text !== \"string\") throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected {generated_text: string}\");\n    return res;\n}\n// src/tasks/cv/objectDetection.ts\nasync function $83f84355242de2ef$export$76ab3938a177f534(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"object-detection\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\");\n    return res;\n}\n// src/tasks/cv/textToImage.ts\nasync function $83f84355242de2ef$export$b5b9acc46fc11686(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"text-to-image\"\n    });\n    const isValidOutput = res && res instanceof Blob;\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Blob\");\n    return res;\n}\n// ../shared/src/base64FromBytes.ts\nfunction $83f84355242de2ef$var$base64FromBytes(arr) {\n    if (globalThis.Buffer) return globalThis.Buffer.from(arr).toString(\"base64\");\n    else {\n        const bin = [];\n        arr.forEach((byte)=>{\n            bin.push(String.fromCharCode(byte));\n        });\n        return globalThis.btoa(bin.join(\"\"));\n    }\n}\n// ../shared/src/isBackend.ts\nvar $83f84355242de2ef$var$isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nvar $83f84355242de2ef$var$isWebWorker = typeof self === \"object\" && self.constructor && self.constructor.name === \"DedicatedWorkerGlobalScope\";\n// src/tasks/cv/imageToImage.ts\nasync function $83f84355242de2ef$export$1f65a9f0c1989d75(args, options) {\n    let reqArgs;\n    if (!args.parameters) reqArgs = {\n        accessToken: args.accessToken,\n        model: args.model,\n        data: args.inputs\n    };\n    else reqArgs = {\n        ...args,\n        inputs: $83f84355242de2ef$var$base64FromBytes(new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer()))\n    };\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(reqArgs, {\n        ...options,\n        taskHint: \"image-to-image\"\n    });\n    const isValidOutput = res && res instanceof Blob;\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Blob\");\n    return res;\n}\n// src/tasks/cv/zeroShotImageClassification.ts\nasync function $83f84355242de2ef$export$9dc792cb511566f3(args, options) {\n    const reqArgs = {\n        ...args,\n        inputs: {\n            image: $83f84355242de2ef$var$base64FromBytes(new Uint8Array(args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()))\n        }\n    };\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(reqArgs, {\n        ...options,\n        taskHint: \"zero-shot-image-classification\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x.label === \"string\" && typeof x.score === \"number\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{label: string, score: number}>\");\n    return res;\n}\n// src/tasks/nlp/conversational.ts\nasync function $83f84355242de2ef$export$fb2671fdb4412f4(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"conversational\"\n    });\n    const isValidOutput = Array.isArray(res.conversation.generated_responses) && res.conversation.generated_responses.every((x)=>typeof x === \"string\") && Array.isArray(res.conversation.past_user_inputs) && res.conversation.past_user_inputs.every((x)=>typeof x === \"string\") && typeof res.generated_text === \"string\" && (typeof res.warnings === \"undefined\" || Array.isArray(res.warnings) && res.warnings.every((x)=>typeof x === \"string\"));\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected {conversation: {generated_responses: string[], past_user_inputs: string[]}, generated_text: string, warnings: string[]}\");\n    return res;\n}\n// src/tasks/nlp/featureExtraction.ts\nasync function $83f84355242de2ef$export$4da39d3aa25bf588(args, options) {\n    const defaultTask = args.model ? await $83f84355242de2ef$var$getDefaultTask(args.model, args.accessToken, options) : void 0;\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"feature-extraction\",\n        ...defaultTask === \"sentence-similarity\" && {\n            forceTask: \"feature-extraction\"\n        }\n    });\n    let isValidOutput = true;\n    const isNumArrayRec = (arr, maxDepth, curDepth = 0)=>{\n        if (curDepth > maxDepth) return false;\n        if (arr.every((x)=>Array.isArray(x))) return arr.every((x)=>isNumArrayRec(x, maxDepth, curDepth + 1));\n        else return arr.every((x)=>typeof x === \"number\");\n    };\n    isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<number[][][] | number[][] | number[] | number>\");\n    return res;\n}\n// src/tasks/nlp/fillMask.ts\nasync function $83f84355242de2ef$export$f3dee6b3293edc29(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"fill-mask\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\");\n    return res;\n}\n// src/tasks/nlp/questionAnswering.ts\nasync function $83f84355242de2ef$export$de2ef96765c63d8f(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"question-answering\"\n    });\n    const isValidOutput = typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected {answer: string, end: number, score: number, start: number}\");\n    return res;\n}\n// src/tasks/nlp/sentenceSimilarity.ts\nasync function $83f84355242de2ef$export$f5bdb9275cdaf228(args, options) {\n    const defaultTask = args.model ? await $83f84355242de2ef$var$getDefaultTask(args.model, args.accessToken, options) : void 0;\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"sentence-similarity\",\n        ...defaultTask === \"feature-extraction\" && {\n            forceTask: \"sentence-similarity\"\n        }\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x === \"number\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected number[]\");\n    return res;\n}\n// src/tasks/nlp/summarization.ts\nasync function $83f84355242de2ef$export$9eefd9261892b2a5(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"summarization\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x?.summary_text === \"string\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{summary_text: string}>\");\n    return res?.[0];\n}\n// src/tasks/nlp/tableQuestionAnswering.ts\nasync function $83f84355242de2ef$export$8d37b662f2b5d26(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"table-question-answering\"\n    });\n    const isValidOutput = typeof res?.aggregator === \"string\" && typeof res.answer === \"string\" && Array.isArray(res.cells) && res.cells.every((x)=>typeof x === \"string\") && Array.isArray(res.coordinates) && res.coordinates.every((coord)=>Array.isArray(coord) && coord.every((x)=>typeof x === \"number\"));\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\");\n    return res;\n}\n// src/tasks/nlp/textClassification.ts\nasync function $83f84355242de2ef$export$274031b1177580ed(args, options) {\n    const res = (await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"text-classification\"\n    }))?.[0];\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x?.label === \"string\" && typeof x.score === \"number\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{label: string, score: number}>\");\n    return res;\n}\n// src/tasks/nlp/textGeneration.ts\nasync function $83f84355242de2ef$export$c8d25d5e9850cad5(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"text-generation\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x?.generated_text === \"string\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{generated_text: string}>\");\n    return res?.[0];\n}\n// src/tasks/nlp/textGenerationStream.ts\nasync function* $83f84355242de2ef$export$9a70408d68cc560c(args, options) {\n    yield* $83f84355242de2ef$export$8607f8b0bdf7b41e(args, {\n        ...options,\n        taskHint: \"text-generation\"\n    });\n}\n// src/utils/toArray.ts\nfunction $83f84355242de2ef$var$toArray(obj) {\n    if (Array.isArray(obj)) return obj;\n    return [\n        obj\n    ];\n}\n// src/tasks/nlp/tokenClassification.ts\nasync function $83f84355242de2ef$export$c754171538aa992c(args, options) {\n    const res = $83f84355242de2ef$var$toArray(await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"token-classification\"\n    }));\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\");\n    return res;\n}\n// src/tasks/nlp/translation.ts\nasync function $83f84355242de2ef$export$a984e488de492859(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"translation\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x?.translation_text === \"string\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected type Array<{translation_text: string}>\");\n    return res?.[0];\n}\n// src/tasks/nlp/zeroShotClassification.ts\nasync function $83f84355242de2ef$export$703bc6fbfac4432d(args, options) {\n    const res = $83f84355242de2ef$var$toArray(await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"zero-shot-classification\"\n    }));\n    const isValidOutput = Array.isArray(res) && res.every((x)=>Array.isArray(x.labels) && x.labels.every((_label)=>typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every((_score)=>typeof _score === \"number\") && typeof x.sequence === \"string\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\n    return res;\n}\n// src/tasks/multimodal/documentQuestionAnswering.ts\nasync function $83f84355242de2ef$export$44e879def27251a6(args, options) {\n    const reqArgs = {\n        ...args,\n        inputs: {\n            question: args.inputs.question,\n            // convert Blob or ArrayBuffer to base64\n            image: $83f84355242de2ef$var$base64FromBytes(new Uint8Array(args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()))\n        }\n    };\n    const res = $83f84355242de2ef$var$toArray(await $83f84355242de2ef$export$b5fe3f66a567bec0(reqArgs, {\n        ...options,\n        taskHint: \"document-question-answering\"\n    }))?.[0];\n    const isValidOutput = typeof res?.answer === \"string\" && (typeof res.end === \"number\" || typeof res.end === \"undefined\") && (typeof res.score === \"number\" || typeof res.score === \"undefined\") && (typeof res.start === \"number\" || typeof res.start === \"undefined\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\n    return res;\n}\n// src/tasks/multimodal/visualQuestionAnswering.ts\nasync function $83f84355242de2ef$export$f71526656a63f07b(args, options) {\n    const reqArgs = {\n        ...args,\n        inputs: {\n            question: args.inputs.question,\n            // convert Blob or ArrayBuffer to base64\n            image: $83f84355242de2ef$var$base64FromBytes(new Uint8Array(args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()))\n        }\n    };\n    const res = (await $83f84355242de2ef$export$b5fe3f66a567bec0(reqArgs, {\n        ...options,\n        taskHint: \"visual-question-answering\"\n    }))?.[0];\n    const isValidOutput = typeof res?.answer === \"string\" && typeof res.score === \"number\";\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected Array<{answer: string, score: number}>\");\n    return res;\n}\n// src/tasks/tabular/tabularRegression.ts\nasync function $83f84355242de2ef$export$15d00edf67cac9c3(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"tabular-regression\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x === \"number\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected number[]\");\n    return res;\n}\n// src/tasks/tabular/tabularClassification.ts\nasync function $83f84355242de2ef$export$81fb7c2b09f13493(args, options) {\n    const res = await $83f84355242de2ef$export$b5fe3f66a567bec0(args, {\n        ...options,\n        taskHint: \"tabular-classification\"\n    });\n    const isValidOutput = Array.isArray(res) && res.every((x)=>typeof x === \"number\");\n    if (!isValidOutput) throw new $83f84355242de2ef$export$f8adce7c2e271071(\"Expected number[]\");\n    return res;\n}\n// src/HfInference.ts\nvar $83f84355242de2ef$export$3a29f44d63a781cb = class {\n    accessToken;\n    defaultOptions;\n    constructor(accessToken = \"\", defaultOptions = {}){\n        this.accessToken = accessToken;\n        this.defaultOptions = defaultOptions;\n        for (const [name, fn] of Object.entries($83f84355242de2ef$var$tasks_exports))Object.defineProperty(this, name, {\n            enumerable: false,\n            value: (params, options)=>// eslint-disable-next-line @typescript-eslint/no-explicit-any\n                fn({\n                    ...params,\n                    accessToken: accessToken\n                }, {\n                    ...defaultOptions,\n                    ...options\n                })\n        });\n    }\n    /**\n   * Returns copy of HfInference tied to a specified endpoint.\n   */ endpoint(endpointUrl) {\n        return new $83f84355242de2ef$export$e2ce511a2d158c9a(endpointUrl, this.accessToken, this.defaultOptions);\n    }\n};\nvar $83f84355242de2ef$export$e2ce511a2d158c9a = class {\n    constructor(endpointUrl, accessToken = \"\", defaultOptions = {}){\n        accessToken;\n        defaultOptions;\n        for (const [name, fn] of Object.entries($83f84355242de2ef$var$tasks_exports))Object.defineProperty(this, name, {\n            enumerable: false,\n            value: (params, options)=>// eslint-disable-next-line @typescript-eslint/no-explicit-any\n                fn({\n                    ...params,\n                    accessToken: accessToken,\n                    model: endpointUrl\n                }, {\n                    ...defaultOptions,\n                    ...options\n                })\n        });\n    }\n};\n\n\nvar $eca075ad100d834d$exports = {};\n\"use strict\";\n\n\nconst $4f704d387100fe8e$var$HF_TOKEN = \"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\";\nconst $4f704d387100fe8e$var$inference = new (0, $83f84355242de2ef$export$3a29f44d63a781cb)($4f704d387100fe8e$var$HF_TOKEN);\nasync function $4f704d387100fe8e$var$createBlobFromFilepath(filepath) {\n    try {\n        const data = await (0, $eca075ad100d834d$exports.readFile)(filepath);\n        const blob = new Blob([\n            data\n        ]);\n        return blob;\n    } catch (error) {\n        throw error;\n    }\n}\nasync function $4f704d387100fe8e$var$predictFromFile() {\n    // You can also omit \"model\" to use the recommended model for the task\n    console.log(\"Calling inference.translation\");\n    const filepath = \"audio files/good luck charlie/g1.mp3\";\n    const result = await $4f704d387100fe8e$var$inference.audioClassification({\n        model: \"nomrom/Spencer-Translator\",\n        data: await $4f704d387100fe8e$var$createBlobFromFilepath(filepath)\n    });\n    console.log(result);\n}\nasync function $4f704d387100fe8e$var$predictFromBlob(blob) {\n    // You can also omit \"model\" to use the recommended model for the task\n    console.log(\"Calling inference.translation\");\n    const result = await $4f704d387100fe8e$var$inference.audioClassification({\n        model: \"nomrom/Spencer-Translator\",\n        data: blob\n    });\n    console.log(result);\n    return result;\n}\nconst $4f704d387100fe8e$var$recordAudio = ()=>{\n    return new Promise((resolve)=>{\n        navigator.mediaDevices.getUserMedia({\n            audio: true\n        }).then((stream)=>{\n            document.getElementById(\"status\").innerHTML = \"creating media recorder...\";\n            const mediaRecorder = new MediaRecorder(stream);\n            const audioChunks = [];\n            mediaRecorder.addEventListener(\"dataavailable\", (event)=>{\n                audioChunks.push(event.data);\n            });\n            const start = ()=>{\n                audioChunks.length = 0;\n                mediaRecorder.start();\n            };\n            const stop = ()=>{\n                return new Promise((resolve)=>{\n                    mediaRecorder.addEventListener(\"stop\", ()=>{\n                        const audioBlob = new Blob(audioChunks);\n                        const audioUrl = URL.createObjectURL(audioBlob);\n                        const audio = new Audio(audioUrl);\n                        const play = ()=>{\n                            audio.play();\n                        };\n                        resolve({\n                            audioBlob: audioBlob,\n                            audioUrl: audioUrl,\n                            play: play\n                        });\n                    });\n                    mediaRecorder.stop();\n                });\n            };\n            document.getElementById(\"status\").innerHTML = \"created media recorder\";\n            resolve({\n                start: start,\n                stop: stop\n            });\n        });\n    });\n};\nlet $4f704d387100fe8e$var$recorder = null;\nfunction $4f704d387100fe8e$var$getObjectWithHighestScore(objects) {\n    if (objects.length === 0) return null; // Return null if the array is empty\n    let maxScoreObject = objects[0]; // Initialize with the first object\n    for(let i = 1; i < objects.length; i++)if (objects[i].score > maxScoreObject.score) maxScoreObject = objects[i]; // Update maxScoreObject if a higher score is found\n    return maxScoreObject;\n}\nasync function $4f704d387100fe8e$var$recordLoop() {\n    document.getElementById(\"status\").innerHTML = \"recording...\";\n    $4f704d387100fe8e$var$recorder.start();\n    await new Promise((r)=>setTimeout(r, 2000)); // record for this amount of seconds\n    const audio = await $4f704d387100fe8e$var$recorder.stop();\n    document.getElementById(\"status\").innerHTML = \"predicting...\";\n    const colors = [\n        \"green\",\n        \"red\",\n        \"blue\",\n        \"yellow\",\n        \"purple\",\n        \"orange\"\n    ];\n    try {\n        const results = await $4f704d387100fe8e$var$predictFromBlob(audio.audioBlob);\n        bestScore = $4f704d387100fe8e$var$getObjectWithHighestScore(results);\n        index = results.indexOf(bestScore);\n        console.log(bestScore);\n        if (bestScore[\"score\"] > 0.6) {\n            document.getElementById(\"prediction\").innerHTML = bestScore[\"label\"];\n            document.getElementById(\"prediction\").style.color = colors[index];\n            document.getElementById(\"error\").innerHTML = \"\";\n            $4f704d387100fe8e$var$speak(bestScore[\"label\"]);\n        } else {\n            document.getElementById(\"prediction\").innerHTML = \"_________\";\n            document.getElementById(\"prediction\").style.color = \"white\";\n            document.getElementById(\"error\").innerHTML = \"confidence too low\";\n        }\n    } catch (err) {\n        console.log(\"Error calling audioClassification\");\n        console.log(err);\n        document.getElementById(\"error\").innerHTML = \"error calling audio classification API\";\n    }\n}\nasync function $4f704d387100fe8e$var$callRepeatedly() {\n    $4f704d387100fe8e$var$recorder = await $4f704d387100fe8e$var$recordAudio();\n    while(true)await $4f704d387100fe8e$var$recordLoop();\n}\nconst $4f704d387100fe8e$var$synth = window.speechSynthesis;\nfunction $4f704d387100fe8e$var$speak(s) {\n    if ($4f704d387100fe8e$var$synth.speaking) {\n        console.error(\"speechSynthesis.speaking\");\n        return;\n    }\n    const utterThis = new SpeechSynthesisUtterance(s);\n    utterThis.onend = function(event) {\n        console.log(\"SpeechSynthesisUtterance.onend\");\n    };\n    utterThis.onerror = function(event) {\n        console.error(\"SpeechSynthesisUtterance.onerror\");\n    };\n    $4f704d387100fe8e$var$synth.speak(utterThis);\n}\n$4f704d387100fe8e$var$callRepeatedly();\n\n\n//# sourceMappingURL=index.7e31a08e.js.map\n","import { HfInference } from \"@huggingface/inference\";\nimport { readFile } from 'fs/promises';\n\nconst HF_TOKEN = \"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\";\n\nconst inference = new HfInference(HF_TOKEN);\n\nasync function createBlobFromFilepath(filepath) {\n  try {\n    const data = await readFile(filepath);\n    const blob = new Blob([data]);\n    return blob;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function predictFromFile() {\n  // You can also omit \"model\" to use the recommended model for the task\n  console.log(\"Calling inference.translation\");\n  const filepath = 'audio files/good luck charlie/g1.mp3';\n  const result = await inference.audioClassification({\n    model: 'nomrom/Spencer-Translator',\n    data: await createBlobFromFilepath(filepath)\n  })\n  console.log(result);\n}\nasync function predictFromBlob(blob) {\n  // You can also omit \"model\" to use the recommended model for the task\n  console.log(\"Calling inference.translation\");\n  const result = await inference.audioClassification({\n    model: 'nomrom/Spencer-Translator',\n    data: blob\n  })\n  console.log(result);\n  return result;\n}\n\nconst recordAudio = () => {\n  return new Promise(resolve => {\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => {\n        document.getElementById(\"status\").innerHTML = \"creating media recorder...\";\n        const mediaRecorder = new MediaRecorder(stream);\n        const audioChunks = [];\n\n        mediaRecorder.addEventListener(\"dataavailable\", event => {\n          audioChunks.push(event.data);\n        });\n\n        const start = () => {\n          audioChunks.length = 0;\n          mediaRecorder.start();\n        };\n\n        const stop = () => {\n          return new Promise(resolve => {\n            mediaRecorder.addEventListener(\"stop\", () => {\n              const audioBlob = new Blob(audioChunks);\n              const audioUrl = URL.createObjectURL(audioBlob);\n              const audio = new Audio(audioUrl);\n              const play = () => {\n                audio.play();\n              };\n\n              resolve({ audioBlob, audioUrl, play });\n            });\n\n            mediaRecorder.stop();\n          });\n        };\n\n        document.getElementById(\"status\").innerHTML = \"created media recorder\";\n        resolve({ start, stop });\n      });\n  });\n};\nlet recorder = null;\n\nfunction getObjectWithHighestScore(objects) {\n  if (objects.length === 0) {\n    return null; // Return null if the array is empty\n  }\n\n  let maxScoreObject = objects[0]; // Initialize with the first object\n  for (let i = 1; i < objects.length; i++) {\n    if (objects[i].score > maxScoreObject.score) {\n      maxScoreObject = objects[i]; // Update maxScoreObject if a higher score is found\n    }\n  }\n\n  return maxScoreObject;\n}\n\nasync function recordLoop() {\n  document.getElementById(\"status\").innerHTML = \"recording...\";\n  recorder.start();\n  await new Promise(r => setTimeout(r, 2000)); // record for this amount of seconds\n  const audio = await recorder.stop();\n  document.getElementById(\"status\").innerHTML = \"predicting...\";\n  const colors = [\"green\", \"red\", \"blue\", \"yellow\", \"purple\", \"orange\"]\n  try {\n    const results = await predictFromBlob(audio.audioBlob);\n    bestScore = getObjectWithHighestScore(results);\n    index = results.indexOf(bestScore);\n    console.log(bestScore);\n    if (bestScore['score'] > 0.6) {\n      document.getElementById(\"prediction\").innerHTML = bestScore[\"label\"];\n      document.getElementById(\"prediction\").style.color = colors[index];\n      document.getElementById(\"error\").innerHTML = \"\";\n      speak(bestScore[\"label\"])\n    } else {\n      document.getElementById(\"prediction\").innerHTML = \"_________\";\n      document.getElementById(\"prediction\").style.color = \"white\";\n      document.getElementById(\"error\").innerHTML = \"confidence too low\";\n    }\n  } catch (err) {\n    console.log('Error calling audioClassification');\n    console.log(err);\n    document.getElementById(\"error\").innerHTML = \"error calling audio classification API\";\n  }\n}\n\nasync function callRepeatedly() {\n  recorder = await recordAudio();\n  while (true) {\n    await recordLoop();\n  }\n}\n\nconst synth = window.speechSynthesis;\n\nfunction speak(s) {\n  if (synth.speaking) {\n    console.error(\"speechSynthesis.speaking\");\n    return;\n  }\n\n  const utterThis = new SpeechSynthesisUtterance(s);\n\n  utterThis.onend = function (event) {\n    console.log(\"SpeechSynthesisUtterance.onend\");\n  };\n\n  utterThis.onerror = function (event) {\n    console.error(\"SpeechSynthesisUtterance.onerror\");\n  };\n\n  synth.speak(utterThis);\n}\n\ncallRepeatedly();\n\n","/// <reference path=\"./index.d.ts\" />\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/tasks/index.ts\nvar tasks_exports = {};\n__export(tasks_exports, {\n  audioClassification: () => audioClassification,\n  audioToAudio: () => audioToAudio,\n  automaticSpeechRecognition: () => automaticSpeechRecognition,\n  conversational: () => conversational,\n  documentQuestionAnswering: () => documentQuestionAnswering,\n  featureExtraction: () => featureExtraction,\n  fillMask: () => fillMask,\n  imageClassification: () => imageClassification,\n  imageSegmentation: () => imageSegmentation,\n  imageToImage: () => imageToImage,\n  imageToText: () => imageToText,\n  objectDetection: () => objectDetection,\n  questionAnswering: () => questionAnswering,\n  request: () => request,\n  sentenceSimilarity: () => sentenceSimilarity,\n  streamingRequest: () => streamingRequest,\n  summarization: () => summarization,\n  tableQuestionAnswering: () => tableQuestionAnswering,\n  tabularClassification: () => tabularClassification,\n  tabularRegression: () => tabularRegression,\n  textClassification: () => textClassification,\n  textGeneration: () => textGeneration,\n  textGenerationStream: () => textGenerationStream,\n  textToImage: () => textToImage,\n  textToSpeech: () => textToSpeech,\n  tokenClassification: () => tokenClassification,\n  translation: () => translation,\n  visualQuestionAnswering: () => visualQuestionAnswering,\n  zeroShotClassification: () => zeroShotClassification,\n  zeroShotImageClassification: () => zeroShotImageClassification\n});\n\n// src/lib/isUrl.ts\nfunction isUrl(modelOrUrl) {\n  return /^http(s?):/.test(modelOrUrl) || modelOrUrl.startsWith(\"/\");\n}\n\n// src/lib/getDefaultTask.ts\nvar taskCache = /* @__PURE__ */ new Map();\nvar CACHE_DURATION = 10 * 60 * 1e3;\nvar MAX_CACHE_ITEMS = 1e3;\nvar HF_HUB_URL = \"https://huggingface.co\";\nasync function getDefaultTask(model, accessToken, options) {\n  if (isUrl(model)) {\n    return null;\n  }\n  const key = `${model}:${accessToken}`;\n  let cachedTask = taskCache.get(key);\n  if (cachedTask && cachedTask.date < new Date(Date.now() - CACHE_DURATION)) {\n    taskCache.delete(key);\n    cachedTask = void 0;\n  }\n  if (cachedTask === void 0) {\n    const modelTask = await (options?.fetch ?? fetch)(`${HF_HUB_URL}/api/models/${model}?expand[]=pipeline_tag`, {\n      headers: accessToken ? { Authorization: `Bearer ${accessToken}` } : {}\n    }).then((resp) => resp.json()).then((json) => json.pipeline_tag).catch(() => null);\n    if (!modelTask) {\n      return null;\n    }\n    cachedTask = { task: modelTask, date: /* @__PURE__ */ new Date() };\n    taskCache.set(key, { task: modelTask, date: /* @__PURE__ */ new Date() });\n    if (taskCache.size > MAX_CACHE_ITEMS) {\n      taskCache.delete(taskCache.keys().next().value);\n    }\n  }\n  return cachedTask.task;\n}\n\n// src/lib/makeRequestOptions.ts\nvar HF_INFERENCE_API_BASE_URL = \"https://api-inference.huggingface.co\";\nvar tasks = null;\nasync function makeRequestOptions(args, options) {\n  const { accessToken, model: _model, ...otherArgs } = args;\n  let { model } = args;\n  const { forceTask: task, includeCredentials, taskHint, ...otherOptions } = options ?? {};\n  const headers = {};\n  if (accessToken) {\n    headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n  if (!model && !tasks && taskHint) {\n    const res = await fetch(`${HF_HUB_URL}/api/tasks`);\n    if (res.ok) {\n      tasks = await res.json();\n    }\n  }\n  if (!model && tasks && taskHint) {\n    const taskInfo = tasks[taskHint];\n    if (taskInfo) {\n      model = taskInfo.models[0].id;\n    }\n  }\n  if (!model) {\n    throw new Error(\"No model provided, and no default model found for this task\");\n  }\n  const binary = \"data\" in args && !!args.data;\n  if (!binary) {\n    headers[\"Content-Type\"] = \"application/json\";\n  } else {\n    if (options?.wait_for_model) {\n      headers[\"X-Wait-For-Model\"] = \"true\";\n    }\n    if (options?.use_cache === false) {\n      headers[\"X-Use-Cache\"] = \"false\";\n    }\n    if (options?.dont_load_model) {\n      headers[\"X-Load-Model\"] = \"0\";\n    }\n  }\n  const url = (() => {\n    if (isUrl(model)) {\n      return model;\n    }\n    if (task) {\n      return `${HF_INFERENCE_API_BASE_URL}/pipeline/${task}/${model}`;\n    }\n    return `${HF_INFERENCE_API_BASE_URL}/models/${model}`;\n  })();\n  let credentials;\n  if (typeof includeCredentials === \"string\") {\n    credentials = includeCredentials;\n  } else if (typeof includeCredentials === \"boolean\") {\n    credentials = includeCredentials ? \"include\" : void 0;\n  } else if (includeCredentials === void 0) {\n    credentials = \"same-origin\";\n  }\n  const info = {\n    headers,\n    method: \"POST\",\n    body: binary ? args.data : JSON.stringify({\n      ...otherArgs,\n      options: options && otherOptions\n    }),\n    credentials,\n    signal: options?.signal\n  };\n  return { url, info };\n}\n\n// src/tasks/custom/request.ts\nasync function request(args, options) {\n  const { url, info } = await makeRequestOptions(args, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return request(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if (output.error) {\n        throw new Error(output.error);\n      }\n    }\n    throw new Error(\"An error occurred while fetching the blob\");\n  }\n  if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return await response.json();\n  }\n  return await response.blob();\n}\n\n// src/vendor/fetch-event-source/parse.ts\nfunction getLines(onLine) {\n  let buffer;\n  let position;\n  let fieldLength;\n  let discardTrailingNewline = false;\n  return function onChunk(arr) {\n    if (buffer === void 0) {\n      buffer = arr;\n      position = 0;\n      fieldLength = -1;\n    } else {\n      buffer = concat(buffer, arr);\n    }\n    const bufLength = buffer.length;\n    let lineStart = 0;\n    while (position < bufLength) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === 10 /* NewLine */) {\n          lineStart = ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineEnd = -1;\n      for (; position < bufLength && lineEnd === -1; ++position) {\n        switch (buffer[position]) {\n          case 58 /* Colon */:\n            if (fieldLength === -1) {\n              fieldLength = position - lineStart;\n            }\n            break;\n          case 13 /* CarriageReturn */:\n            discardTrailingNewline = true;\n          case 10 /* NewLine */:\n            lineEnd = position;\n            break;\n        }\n      }\n      if (lineEnd === -1) {\n        break;\n      }\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n      lineStart = position;\n      fieldLength = -1;\n    }\n    if (lineStart === bufLength) {\n      buffer = void 0;\n    } else if (lineStart !== 0) {\n      buffer = buffer.subarray(lineStart);\n      position -= lineStart;\n    }\n  };\n}\nfunction getMessages(onId, onRetry, onMessage) {\n  let message = newMessage();\n  const decoder = new TextDecoder();\n  return function onLine(line, fieldLength) {\n    if (line.length === 0) {\n      onMessage?.(message);\n      message = newMessage();\n    } else if (fieldLength > 0) {\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* Space */ ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      switch (field) {\n        case \"data\":\n          message.data = message.data ? message.data + \"\\n\" + value : value;\n          break;\n        case \"event\":\n          message.event = value;\n          break;\n        case \"id\":\n          onId(message.id = value);\n          break;\n        case \"retry\":\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            onRetry(message.retry = retry);\n          }\n          break;\n      }\n    }\n  };\n}\nfunction concat(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction newMessage() {\n  return {\n    data: \"\",\n    event: \"\",\n    id: \"\",\n    retry: void 0\n  };\n}\n\n// src/tasks/custom/streamingRequest.ts\nasync function* streamingRequest(args, options) {\n  const { url, info } = await makeRequestOptions({ ...args, stream: true }, options);\n  const response = await (options?.fetch ?? fetch)(url, info);\n  if (options?.retry_on_error !== false && response.status === 503 && !options?.wait_for_model) {\n    return streamingRequest(args, {\n      ...options,\n      wait_for_model: true\n    });\n  }\n  if (!response.ok) {\n    if (response.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      const output = await response.json();\n      if (output.error) {\n        throw new Error(output.error);\n      }\n    }\n    throw new Error(`Server response contains error: ${response.status}`);\n  }\n  if (!response.headers.get(\"content-type\")?.startsWith(\"text/event-stream\")) {\n    throw new Error(\n      `Server does not support event stream content type, it returned ` + response.headers.get(\"content-type\")\n    );\n  }\n  if (!response.body) {\n    return;\n  }\n  const reader = response.body.getReader();\n  let events = [];\n  const onEvent = (event) => {\n    events.push(event);\n  };\n  const onChunk = getLines(\n    getMessages(\n      () => {\n      },\n      () => {\n      },\n      onEvent\n    )\n  );\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done)\n        return;\n      onChunk(value);\n      for (const event of events) {\n        if (event.data.length > 0) {\n          const data = JSON.parse(event.data);\n          if (typeof data === \"object\" && data !== null && \"error\" in data) {\n            throw new Error(data.error);\n          }\n          yield data;\n        }\n      }\n      events = [];\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// src/lib/InferenceOutputError.ts\nvar InferenceOutputError = class extends TypeError {\n  constructor(message) {\n    super(\n      `Invalid inference output: ${message}. Use the 'request' method with the same parameters to do a custom call with no type checking.`\n    );\n    this.name = \"InferenceOutputError\";\n  }\n};\n\n// src/tasks/audio/audioClassification.ts\nasync function audioClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"audio-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/audio/automaticSpeechRecognition.ts\nasync function automaticSpeechRecognition(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"automatic-speech-recognition\"\n  });\n  const isValidOutput = typeof res?.text === \"string\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/audio/textToSpeech.ts\nasync function textToSpeech(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-to-speech\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/audio/audioToAudio.ts\nasync function audioToAudio(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"audio-to-audio\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.label === \"string\" && typeof x.blob === \"string\" && typeof x[\"content-type\"] === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, blob: string, content-type: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageClassification.ts\nasync function imageClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageSegmentation.ts\nasync function imageSegmentation(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"image-segmentation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.mask === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, mask: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/cv/imageToText.ts\nasync function imageToText(args, options) {\n  const res = (await request(args, {\n    ...options,\n    taskHint: \"image-to-text\"\n  }))?.[0];\n  if (typeof res?.generated_text !== \"string\") {\n    throw new InferenceOutputError(\"Expected {generated_text: string}\");\n  }\n  return res;\n}\n\n// src/tasks/cv/objectDetection.ts\nasync function objectDetection(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"object-detection\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.label === \"string\" && typeof x.score === \"number\" && typeof x.box.xmin === \"number\" && typeof x.box.ymin === \"number\" && typeof x.box.xmax === \"number\" && typeof x.box.ymax === \"number\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{label:string; score:number; box:{xmin:number; ymin:number; xmax:number; ymax:number}}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/cv/textToImage.ts\nasync function textToImage(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// ../shared/src/base64FromBytes.ts\nfunction base64FromBytes(arr) {\n  if (globalThis.Buffer) {\n    return globalThis.Buffer.from(arr).toString(\"base64\");\n  } else {\n    const bin = [];\n    arr.forEach((byte) => {\n      bin.push(String.fromCharCode(byte));\n    });\n    return globalThis.btoa(bin.join(\"\"));\n  }\n}\n\n// ../shared/src/isBackend.ts\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nvar isWebWorker = typeof self === \"object\" && self.constructor && self.constructor.name === \"DedicatedWorkerGlobalScope\";\n\n// src/tasks/cv/imageToImage.ts\nasync function imageToImage(args, options) {\n  let reqArgs;\n  if (!args.parameters) {\n    reqArgs = {\n      accessToken: args.accessToken,\n      model: args.model,\n      data: args.inputs\n    };\n  } else {\n    reqArgs = {\n      ...args,\n      inputs: base64FromBytes(\n        new Uint8Array(args.inputs instanceof ArrayBuffer ? args.inputs : await args.inputs.arrayBuffer())\n      )\n    };\n  }\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"image-to-image\"\n  });\n  const isValidOutput = res && res instanceof Blob;\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Blob\");\n  }\n  return res;\n}\n\n// src/tasks/cv/zeroShotImageClassification.ts\nasync function zeroShotImageClassification(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      image: base64FromBytes(\n        new Uint8Array(\n          args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\n        )\n      )\n    }\n  };\n  const res = await request(reqArgs, {\n    ...options,\n    taskHint: \"zero-shot-image-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/conversational.ts\nasync function conversational(args, options) {\n  const res = await request(args, { ...options, taskHint: \"conversational\" });\n  const isValidOutput = Array.isArray(res.conversation.generated_responses) && res.conversation.generated_responses.every((x) => typeof x === \"string\") && Array.isArray(res.conversation.past_user_inputs) && res.conversation.past_user_inputs.every((x) => typeof x === \"string\") && typeof res.generated_text === \"string\" && (typeof res.warnings === \"undefined\" || Array.isArray(res.warnings) && res.warnings.every((x) => typeof x === \"string\"));\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected {conversation: {generated_responses: string[], past_user_inputs: string[]}, generated_text: string, warnings: string[]}\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/featureExtraction.ts\nasync function featureExtraction(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(args, {\n    ...options,\n    taskHint: \"feature-extraction\",\n    ...defaultTask === \"sentence-similarity\" && { forceTask: \"feature-extraction\" }\n  });\n  let isValidOutput = true;\n  const isNumArrayRec = (arr, maxDepth, curDepth = 0) => {\n    if (curDepth > maxDepth)\n      return false;\n    if (arr.every((x) => Array.isArray(x))) {\n      return arr.every((x) => isNumArrayRec(x, maxDepth, curDepth + 1));\n    } else {\n      return arr.every((x) => typeof x === \"number\");\n    }\n  };\n  isValidOutput = Array.isArray(res) && isNumArrayRec(res, 3, 0);\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<number[][][] | number[][] | number[] | number>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/fillMask.ts\nasync function fillMask(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"fill-mask\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.score === \"number\" && typeof x.sequence === \"string\" && typeof x.token === \"number\" && typeof x.token_str === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{score: number, sequence: string, token: number, token_str: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/questionAnswering.ts\nasync function questionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"question-answering\"\n  });\n  const isValidOutput = typeof res === \"object\" && !!res && typeof res.answer === \"string\" && typeof res.end === \"number\" && typeof res.score === \"number\" && typeof res.start === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected {answer: string, end: number, score: number, start: number}\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/sentenceSimilarity.ts\nasync function sentenceSimilarity(args, options) {\n  const defaultTask = args.model ? await getDefaultTask(args.model, args.accessToken, options) : void 0;\n  const res = await request(args, {\n    ...options,\n    taskHint: \"sentence-similarity\",\n    ...defaultTask === \"feature-extraction\" && { forceTask: \"sentence-similarity\" }\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/summarization.ts\nasync function summarization(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"summarization\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.summary_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{summary_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/tableQuestionAnswering.ts\nasync function tableQuestionAnswering(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"table-question-answering\"\n  });\n  const isValidOutput = typeof res?.aggregator === \"string\" && typeof res.answer === \"string\" && Array.isArray(res.cells) && res.cells.every((x) => typeof x === \"string\") && Array.isArray(res.coordinates) && res.coordinates.every((coord) => Array.isArray(coord) && coord.every((x) => typeof x === \"number\"));\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected {aggregator: string, answer: string, cells: string[], coordinates: number[][]}\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/textClassification.ts\nasync function textClassification(args, options) {\n  const res = (await request(args, {\n    ...options,\n    taskHint: \"text-classification\"\n  }))?.[0];\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.label === \"string\" && typeof x.score === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{label: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/nlp/textGeneration.ts\nasync function textGeneration(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"text-generation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.generated_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{generated_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/textGenerationStream.ts\nasync function* textGenerationStream(args, options) {\n  yield* streamingRequest(args, {\n    ...options,\n    taskHint: \"text-generation\"\n  });\n}\n\n// src/utils/toArray.ts\nfunction toArray(obj) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\n\n// src/tasks/nlp/tokenClassification.ts\nasync function tokenClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      taskHint: \"token-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => typeof x.end === \"number\" && typeof x.entity_group === \"string\" && typeof x.score === \"number\" && typeof x.start === \"number\" && typeof x.word === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\n      \"Expected Array<{end: number, entity_group: string, score: number, start: number, word: string}>\"\n    );\n  }\n  return res;\n}\n\n// src/tasks/nlp/translation.ts\nasync function translation(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"translation\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x?.translation_text === \"string\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected type Array<{translation_text: string}>\");\n  }\n  return res?.[0];\n}\n\n// src/tasks/nlp/zeroShotClassification.ts\nasync function zeroShotClassification(args, options) {\n  const res = toArray(\n    await request(args, {\n      ...options,\n      taskHint: \"zero-shot-classification\"\n    })\n  );\n  const isValidOutput = Array.isArray(res) && res.every(\n    (x) => Array.isArray(x.labels) && x.labels.every((_label) => typeof _label === \"string\") && Array.isArray(x.scores) && x.scores.every((_score) => typeof _score === \"number\") && typeof x.sequence === \"string\"\n  );\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{labels: string[], scores: number[], sequence: string}>\");\n  }\n  return res;\n}\n\n// src/tasks/multimodal/documentQuestionAnswering.ts\nasync function documentQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(\n        new Uint8Array(\n          args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\n        )\n      )\n    }\n  };\n  const res = toArray(\n    await request(reqArgs, {\n      ...options,\n      taskHint: \"document-question-answering\"\n    })\n  )?.[0];\n  const isValidOutput = typeof res?.answer === \"string\" && (typeof res.end === \"number\" || typeof res.end === \"undefined\") && (typeof res.score === \"number\" || typeof res.score === \"undefined\") && (typeof res.start === \"number\" || typeof res.start === \"undefined\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, end?: number, score?: number, start?: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/multimodal/visualQuestionAnswering.ts\nasync function visualQuestionAnswering(args, options) {\n  const reqArgs = {\n    ...args,\n    inputs: {\n      question: args.inputs.question,\n      // convert Blob or ArrayBuffer to base64\n      image: base64FromBytes(\n        new Uint8Array(\n          args.inputs.image instanceof ArrayBuffer ? args.inputs.image : await args.inputs.image.arrayBuffer()\n        )\n      )\n    }\n  };\n  const res = (await request(reqArgs, {\n    ...options,\n    taskHint: \"visual-question-answering\"\n  }))?.[0];\n  const isValidOutput = typeof res?.answer === \"string\" && typeof res.score === \"number\";\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected Array<{answer: string, score: number}>\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularRegression.ts\nasync function tabularRegression(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-regression\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/tasks/tabular/tabularClassification.ts\nasync function tabularClassification(args, options) {\n  const res = await request(args, {\n    ...options,\n    taskHint: \"tabular-classification\"\n  });\n  const isValidOutput = Array.isArray(res) && res.every((x) => typeof x === \"number\");\n  if (!isValidOutput) {\n    throw new InferenceOutputError(\"Expected number[]\");\n  }\n  return res;\n}\n\n// src/HfInference.ts\nvar HfInference = class {\n  accessToken;\n  defaultOptions;\n  constructor(accessToken = \"\", defaultOptions = {}) {\n    this.accessToken = accessToken;\n    this.defaultOptions = defaultOptions;\n    for (const [name, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n  /**\n   * Returns copy of HfInference tied to a specified endpoint.\n   */\n  endpoint(endpointUrl) {\n    return new HfInferenceEndpoint(endpointUrl, this.accessToken, this.defaultOptions);\n  }\n};\nvar HfInferenceEndpoint = class {\n  constructor(endpointUrl, accessToken = \"\", defaultOptions = {}) {\n    accessToken;\n    defaultOptions;\n    for (const [name, fn] of Object.entries(tasks_exports)) {\n      Object.defineProperty(this, name, {\n        enumerable: false,\n        value: (params, options) => (\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fn({ ...params, accessToken, model: endpointUrl }, { ...defaultOptions, ...options })\n        )\n      });\n    }\n  }\n};\nexport {\n  HfInference,\n  HfInferenceEndpoint,\n  InferenceOutputError,\n  audioClassification,\n  audioToAudio,\n  automaticSpeechRecognition,\n  conversational,\n  documentQuestionAnswering,\n  featureExtraction,\n  fillMask,\n  imageClassification,\n  imageSegmentation,\n  imageToImage,\n  imageToText,\n  objectDetection,\n  questionAnswering,\n  request,\n  sentenceSimilarity,\n  streamingRequest,\n  summarization,\n  tableQuestionAnswering,\n  tabularClassification,\n  tabularRegression,\n  textClassification,\n  textGeneration,\n  textGenerationStream,\n  textToImage,\n  textToSpeech,\n  tokenClassification,\n  translation,\n  visualQuestionAnswering,\n  zeroShotClassification,\n  zeroShotImageClassification\n};\n","\"use strict\";"],"names":["$83f84355242de2ef$var$__defProp","Object","defineProperty","$83f84355242de2ef$var$tasks_exports","$83f84355242de2ef$var$isUrl","modelOrUrl","test","startsWith","$83f84355242de2ef$var$__export","target","all","name","get","enumerable","audioClassification","$83f84355242de2ef$export$191dedb79ecb6be2","audioToAudio","$83f84355242de2ef$export$230679174d66278c","automaticSpeechRecognition","$83f84355242de2ef$export$45540d16a08deefc","conversational","$83f84355242de2ef$export$fb2671fdb4412f4","documentQuestionAnswering","$83f84355242de2ef$export$44e879def27251a6","featureExtraction","$83f84355242de2ef$export$4da39d3aa25bf588","fillMask","$83f84355242de2ef$export$f3dee6b3293edc29","imageClassification","$83f84355242de2ef$export$5e39dd2454de72c1","imageSegmentation","$83f84355242de2ef$export$5d94955430963212","imageToImage","$83f84355242de2ef$export$1f65a9f0c1989d75","imageToText","$83f84355242de2ef$export$453147eda7d56624","objectDetection","$83f84355242de2ef$export$76ab3938a177f534","questionAnswering","$83f84355242de2ef$export$de2ef96765c63d8f","request","$83f84355242de2ef$export$b5fe3f66a567bec0","sentenceSimilarity","$83f84355242de2ef$export$f5bdb9275cdaf228","streamingRequest","$83f84355242de2ef$export$8607f8b0bdf7b41e","summarization","$83f84355242de2ef$export$9eefd9261892b2a5","tableQuestionAnswering","$83f84355242de2ef$export$8d37b662f2b5d26","tabularClassification","$83f84355242de2ef$export$81fb7c2b09f13493","tabularRegression","$83f84355242de2ef$export$15d00edf67cac9c3","textClassification","$83f84355242de2ef$export$274031b1177580ed","textGeneration","$83f84355242de2ef$export$c8d25d5e9850cad5","textGenerationStream","$83f84355242de2ef$export$9a70408d68cc560c","textToImage","$83f84355242de2ef$export$b5b9acc46fc11686","textToSpeech","$83f84355242de2ef$export$571577318a532f76","tokenClassification","$83f84355242de2ef$export$c754171538aa992c","translation","$83f84355242de2ef$export$a984e488de492859","visualQuestionAnswering","$83f84355242de2ef$export$f71526656a63f07b","zeroShotClassification","$83f84355242de2ef$export$703bc6fbfac4432d","zeroShotImageClassification","$83f84355242de2ef$export$9dc792cb511566f3","$83f84355242de2ef$var$taskCache","Map","$83f84355242de2ef$var$HF_HUB_URL","$83f84355242de2ef$var$getDefaultTask","model","accessToken","options","key","cachedTask","date","Date","now","delete","modelTask","fetch","headers","Authorization","then","resp","json","pipeline_tag","catch","task","set","size","keys","next","value","$83f84355242de2ef$var$HF_INFERENCE_API_BASE_URL","$83f84355242de2ef$var$tasks","$83f84355242de2ef$var$makeRequestOptions","args","credentials","_model","otherArgs","forceTask","includeCredentials","taskHint","otherOptions","res","ok","taskInfo","models","id","Error","binary","data","wait_for_model","use_cache","dont_load_model","url","info","method","body","JSON","stringify","signal","response","retry_on_error","status","output","error","blob","$83f84355242de2ef$var$newMessage","event","retry","onLine","buffer","position","fieldLength","discardTrailingNewline","stream","reader","getReader","events","onChunk","$83f84355242de2ef$var$getMessages","onId","onRetry","onMessage","message","decoder","TextDecoder","line","length","field","decode","subarray","valueOffset","parseInt","isNaN","push","arr","$83f84355242de2ef$var$concat","a","b","Uint8Array","bufLength","lineStart","lineEnd","done","read","parse","releaseLock","$83f84355242de2ef$export$f8adce7c2e271071","TypeError","constructor","Array","isArray","every","x","label","score","text","Blob","mask","generated_text","box","xmin","ymin","xmax","ymax","$83f84355242de2ef$var$base64FromBytes","globalThis","Buffer","from","toString","bin","forEach","byte","String","fromCharCode","btoa","join","reqArgs","parameters","inputs","ArrayBuffer","arrayBuffer","image","conversation","generated_responses","past_user_inputs","warnings","defaultTask","isNumArrayRec","maxDepth","curDepth","sequence","token","token_str","answer","end","start","summary_text","aggregator","cells","coordinates","coord","$83f84355242de2ef$var$toArray","obj","entity_group","word","translation_text","labels","_label","scores","_score","question","window","document","self","$83f84355242de2ef$export$3a29f44d63a781cb","defaultOptions","fn","entries","params","endpoint","endpointUrl","$83f84355242de2ef$export$e2ce511a2d158c9a","$4f704d387100fe8e$var$inference","$4f704d387100fe8e$var$predictFromBlob","console","log","result","$4f704d387100fe8e$var$recordAudio","Promise","resolve","navigator","mediaDevices","getUserMedia","audio","getElementById","innerHTML","mediaRecorder","MediaRecorder","audioChunks","addEventListener","stop","audioBlob","audioUrl","URL","createObjectURL","Audio","play","$4f704d387100fe8e$var$recorder","$4f704d387100fe8e$var$recordLoop","r","setTimeout","results","bestScore","$4f704d387100fe8e$var$getObjectWithHighestScore","objects","maxScoreObject","i","index","indexOf","style","color","colors","$4f704d387100fe8e$var$speak","s","$4f704d387100fe8e$var$synth","speaking","utterThis","SpeechSynthesisUtterance","onend","onerror","speak","err","$4f704d387100fe8e$var$callRepeatedly","speechSynthesis"],"version":3,"file":"index.7e31a08e.js.map"}